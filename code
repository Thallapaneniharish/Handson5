class MinHeap:
    def __init__(self):
        self.heap = []

    def build_min_heap(self, data):
        self.heap = data
        n = len(self.heap)
        for i in range(n // 2, -1, -1):
            self.heapify_down(i)

    def heapify_down(self, i):
        while True:
            left_child = 2 * i + 1
            right_child = 2 * i + 2
            smallest = i

            if left_child < len(self.heap) and self.heap[left_child] < self.heap[smallest]:
                smallest = left_child

            if right_child < len(self.heap) and self.heap[right_child] < self.heap[smallest]:
                smallest = right_child

            if smallest != i:
                self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i]
                i = smallest
            else:
                break

    def pop(self):
        if not self.heap:
            return None
        root = self.heap[0]
        last_element = self.heap.pop()
        if self.heap:
            self.heap[0] = last_element
            self.heapify_down(0)
        return root


# Example usage
data = [1, 1, 2, 3, 5, 9, 4, 6, 5]
min_heap = MinHeap()
min_heap.build_min_heap(data)

print("Initial Min Heap:", min_heap.heap)

# Pop the root node
root_node = min_heap.pop()
print("Popped root node:", root_node)

# Heap after popping
print("Heap after popping root node:", min_heap.heap)
